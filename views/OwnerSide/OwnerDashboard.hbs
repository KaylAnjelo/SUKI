<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Owner Dashboard</title>
  <link rel="stylesheet" href="/css/OwnerStyles.css">
  <script src="/js/notifications.js" defer></script>
  <script src="/js/logout.js" defer></script>
  <script src="/js/sidebar.js" defer></script>
  <link rel="icon" type="image/png" href="/assets/SUKI Logo 2.png">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
  <div class="container">
    <aside class="sidebar">
      <button id="sidebarToggle" class="sidebar-toggle" aria-label="Toggle sidebar"><i class="fas fa-bars"></i></button>
      <div class="logo">SUKI Incorporation</div>
      <nav class="nav">
        <a href="/owner-dashboard" class="nav-item active">
          <i class="fas fa-chart-line"></i><span class="label">Dashboard</span>
        </a>
        <a href="/owner/sales-report" class="nav-item">
          <i class="fas fa-chart-bar"></i><span class="label">Sales Report</span>
        </a>
        <a href="/owner/transactions" class="nav-item">
          <i class="fas fa-exchange-alt"></i><span class="label">Transactions</span>
        </a>
        <a href="/owner/products" class="nav-item">
          <i class="fas fa-box"></i><span class="label">Products</span>
        </a>
        <a href="/owner/promotions" class="nav-item">
          <i class="fas fa-percentage"></i><span class="label">Promotions</span>
        </a>
        <a href="/owner/profile" class="nav-item">
          <i class="fas fa-user"></i><span class="label">Profile</span>
        </a>
      </nav>
    </aside>

    <!-- Main Content -->
    <main class="main-content">
      <div class="header">
        <div class="header-left">
          <h1>Dashboard</h1>
        </div>
        <div class="header-right">
          <button id="notificationsBtn" class="notif-button"><i class="fas fa-bell"></i></button>
          <div id="notificationsDropdown" style="display: none;">
            <ul id="notificationsList"></ul>
          </div>
          <div class="user-profile">
            <div class="profile-pic">
              <i class="fas fa-user"></i>
            </div>
            <div class="profile-info">
              <span class="user-name">{{user.username}}</span>
            </div>
          </div>
          <form id="logoutForm" action="/logout" method="POST" style="display: inline;">
            <button type="submit" class="logout">Log out</button>
          </form>
        </div>
      </div>
      
      <!-- Dashboard Content -->
      <div class="dashboard-content">
        <!-- Top Row Cards -->
        <div class="top-row">
          <div class="metric-card total-sales">
            <h3>Total Sales</h3>
            <div class="metric-placeholder">
              <!-- Placeholder for sales data -->
            </div>
          </div>
          
          <div class="metric-card total-orders">
            <h3>Total Orders</h3>
            <div class="metric-placeholder">
              <!-- Placeholder for orders data -->
            </div>
          </div>
        </div>
        
        <!-- Right Column Cards -->
        <div class="right-column">
          <div class="metric-card product-statistic">
            <div class="card-header">
              <h3>Top Products</h3>
              <div class="category-filter">
                <select id="categoryFilter" class="filter-select">
                  <option value="all">All Categories</option>
                  <option value="snacks">Snacks</option>
                  <option value="drinks">Drinks</option>
                  <option value="meals">Meals</option>
                  <option value="desserts">Desserts</option>
                  <option value="beverages">Beverages</option>
                </select>
              </div>
            </div>
            <div class="card-content">
              <div class="chart-container">
                <canvas id="productPieChart" width="300" height="300"></canvas>
              </div>
              <div class="chart-legend" id="chartLegend">
                <!-- Legend will be populated by JavaScript -->
              </div>
              <div class="chart-stats" id="chartStats">
                <!-- Additional stats will be shown here -->
              </div>
            </div>
          </div>
          
          <div class="metric-card recommendation">
            <div class="card-header">
              <h3>Recommendations</h3>
              <div class="recommendation-controls">
                <button id="refreshRecommendations" class="refresh-btn" title="Refresh Recommendations">
                  <i class="fas fa-sync-alt"></i>
                </button>
              </div>
            </div>
            <div class="card-content">
              <div class="recommendations-container" id="recommendationsContainer">
                <div class="loading">
                  <i class="fas fa-brain fa-spin"></i>
                  <div>Analyzing data with K-means clustering...</div>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Bottom Left Card -->
        <div class="bottom-left">
          <div class="metric-card customer-engagement">
            <div class="card-header">
              <h3>Customer Engagement</h3>
              <div class="engagement-controls">
                <select id="engagementPeriodFilter" class="filter-select">
                  <option value="7d">Last 7 Days</option>
                  <option value="30d" selected>Last 30 Days</option>
                  <option value="90d">Last 90 Days</option>
                  <option value="1y">Last Year</option>
                </select>
              </div>
            </div>
            <div class="card-content">
              <div class="engagement-chart-container">
                <canvas id="engagementLineChart" width="400" height="200"></canvas>
              </div>
              <div class="engagement-stats" id="engagementStats">
                <!-- Engagement statistics will be shown here -->
              </div>
            </div>
          </div>
        </div>
      </div>
    </main>
  </div>

  <style>
    .product-statistic {
      min-height: 400px;
    }

    .card-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 16px;
      padding-bottom: 12px;
      border-bottom: 1px solid #e5e7eb;
    }

    .card-header h3 {
      margin: 0;
      font-size: 16px;
      font-weight: 600;
      color: #111827;
    }

    .category-filter {
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .filter-select {
      padding: 6px 12px;
      border: 1px solid #d1d5db;
      border-radius: 6px;
      background: white;
      font-size: 12px;
      color: #374151;
      cursor: pointer;
      transition: border-color 0.2s ease;
    }

    .filter-select:focus {
      outline: none;
      border-color: #7c0f0f;
      box-shadow: 0 0 0 2px rgba(124, 15, 15, 0.1);
    }

    .chart-container {
      position: relative;
      height: 250px;
      margin-bottom: 16px;
      display: flex;
      justify-content: center;
      align-items: center;
    }

    .chart-legend {
      display: flex;
      flex-direction: column;
      gap: 8px;
      margin-bottom: 12px;
    }

    .legend-item {
      display: flex;
      align-items: center;
      gap: 8px;
      font-size: 12px;
      color: #374151;
    }

    .legend-color {
      width: 12px;
      height: 12px;
      border-radius: 50%;
      flex-shrink: 0;
    }

    .legend-text {
      flex: 1;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .legend-name {
      font-weight: 500;
    }

    .legend-value {
      font-weight: 600;
      color: #7c0f0f;
    }

    .chart-stats {
      padding: 12px;
      background: #f9fafb;
      border-radius: 8px;
      font-size: 12px;
      color: #6b7280;
    }

    .stat-item {
      display: flex;
      justify-content: space-between;
      margin-bottom: 4px;
    }

    .stat-item:last-child {
      margin-bottom: 0;
    }

    .loading {
      display: flex;
      justify-content: center;
      align-items: center;
      height: 200px;
      color: #6b7280;
      font-size: 14px;
    }

    .no-data {
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      height: 200px;
      color: #6b7280;
      font-size: 14px;
    }

    .no-data i {
      font-size: 32px;
      margin-bottom: 8px;
      color: #d1d5db;
    }

    /* Customer Engagement Chart Styles */
    .customer-engagement {
      min-height: 400px;
    }

    /* Recommendations Styles */
    .recommendation {
      min-height: 400px;
    }

    .recommendation-controls {
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .refresh-btn {
      background: #7c0f0f;
      color: white;
      border: none;
      padding: 8px 12px;
      border-radius: 6px;
      cursor: pointer;
      transition: background-color 0.2s ease;
      font-size: 12px;
    }

    .refresh-btn:hover {
      background: #5a0000;
    }

    .recommendations-container {
      max-height: 350px;
      overflow-y: auto;
    }

    .recommendation-item {
      background: white;
      border: 1px solid #e5e7eb;
      border-radius: 8px;
      padding: 16px;
      margin-bottom: 12px;
      transition: all 0.2s ease;
      position: relative;
    }

    .recommendation-item:hover {
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
      transform: translateY(-1px);
    }

    .recommendation-header {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      margin-bottom: 8px;
    }

    .recommendation-title {
      font-size: 14px;
      font-weight: 600;
      color: #111827;
      margin: 0;
      flex: 1;
    }

    .recommendation-priority {
      padding: 2px 8px;
      border-radius: 12px;
      font-size: 10px;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    .priority-high {
      background: #fef2f2;
      color: #dc2626;
    }

    .priority-medium {
      background: #fef3c7;
      color: #d97706;
    }

    .priority-low {
      background: #f0fdf4;
      color: #16a34a;
    }

    .recommendation-description {
      font-size: 12px;
      color: #6b7280;
      margin-bottom: 12px;
      line-height: 1.4;
    }

    .recommendation-action {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding-top: 8px;
      border-top: 1px solid #f3f4f6;
    }

    .action-text {
      font-size: 11px;
      color: #7c0f0f;
      font-weight: 500;
    }

    .recommendation-type {
      font-size: 10px;
      color: #9ca3af;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    .recommendation-icon {
      position: absolute;
      top: 12px;
      right: 12px;
      font-size: 16px;
      opacity: 0.3;
    }

    .recommendation-icon.customer-segment {
      color: #7c0f0f;
    }

    .recommendation-icon.product-optimization {
      color: #059669;
    }

    .recommendation-icon.operational-optimization {
      color: #dc2626;
    }

    .recommendation-icon.promotional-strategy {
      color: #d97706;
    }

    .no-recommendations {
      text-align: center;
      padding: 40px 20px;
      color: #6b7280;
    }

    .no-recommendations i {
      font-size: 32px;
      margin-bottom: 12px;
      color: #d1d5db;
    }

    .recommendation-stats {
      display: flex;
      gap: 16px;
      margin-top: 8px;
      font-size: 10px;
      color: #9ca3af;
    }

    .stat-badge {
      background: #f3f4f6;
      padding: 2px 6px;
      border-radius: 4px;
    }

    .engagement-controls {
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .engagement-chart-container {
      position: relative;
      height: 250px;
      margin-bottom: 16px;
    }

    .engagement-stats {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
      gap: 12px;
      padding: 12px;
      background: #f9fafb;
      border-radius: 8px;
    }

    .engagement-stat-item {
      text-align: center;
      padding: 8px;
    }

    .engagement-stat-value {
      display: block;
      font-size: 18px;
      font-weight: 700;
      color: #7c0f0f;
      margin-bottom: 4px;
    }

    .engagement-stat-label {
      font-size: 11px;
      color: #6b7280;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    @media (max-width: 768px) {
      .card-header {
        flex-direction: column;
        gap: 12px;
        align-items: stretch;
      }

      .chart-container {
        height: 200px;
      }

      .engagement-chart-container {
        height: 200px;
      }

      .engagement-stats {
        grid-template-columns: repeat(2, 1fr);
      }
    }
  </style>

  <script>
    let productChart = null;
    let engagementChart = null;

    // Initialize dashboard
    document.addEventListener('DOMContentLoaded', () => {
      console.log('Owner Dashboard loaded');
      initializeProductChart();
      setupCategoryFilter();
      initializeEngagementChart();
      setupEngagementPeriodFilter();
      initializeRecommendations();
      setupRecommendationRefresh();
    });

    // Initialize the product pie chart
    function initializeProductChart() {
      const ctx = document.getElementById('productPieChart').getContext('2d');
      loadProductData('all');
    }

    // Setup category filter event listener
    function setupCategoryFilter() {
      const categoryFilter = document.getElementById('categoryFilter');
      categoryFilter.addEventListener('change', (e) => {
        loadProductData(e.target.value);
      });
    }

    // Load product data from API
    async function loadProductData(category) {
      try {
        showLoading();
        
        const response = await fetch(`/api/owner/top-products?category=${category}&limit=5`);
        const data = await response.json();

        if (!response.ok) {
          throw new Error(data.error || 'Failed to fetch data');
        }

        if (data.labels.length === 0) {
          showNoData(category);
          return;
        }

        renderChart(data);
        renderLegend(data);
        renderStats(data);

      } catch (error) {
        console.error('Error loading product data:', error);
        showError(error.message);
      }
    }

    // Show loading state
    function showLoading() {
      const chartContainer = document.querySelector('.chart-container');
      chartContainer.innerHTML = '<div class="loading"><i class="fas fa-spinner fa-spin"></i> Loading...</div>';
      
      document.getElementById('chartLegend').innerHTML = '';
      document.getElementById('chartStats').innerHTML = '';
    }

    // Show no data state
    function showNoData(category) {
      const chartContainer = document.querySelector('.chart-container');
      const categoryText = category === 'all' ? 'all categories' : category;
      chartContainer.innerHTML = `
        <div class="no-data">
          <i class="fas fa-chart-pie"></i>
          <div>No sales data found for ${categoryText}</div>
        </div>
      `;
      
      document.getElementById('chartLegend').innerHTML = '';
      document.getElementById('chartStats').innerHTML = '';
    }

    // Show error state
    function showError(message) {
      const chartContainer = document.querySelector('.chart-container');
      chartContainer.innerHTML = `
        <div class="no-data">
          <i class="fas fa-exclamation-triangle"></i>
          <div>Error: ${message}</div>
        </div>
      `;
      
      document.getElementById('chartLegend').innerHTML = '';
      document.getElementById('chartStats').innerHTML = '';
    }

    // Render the pie chart
    function renderChart(data) {
      const ctx = document.getElementById('productPieChart').getContext('2d');
      
      // Destroy existing chart if it exists
      if (productChart) {
        productChart.destroy();
      }

      productChart = new Chart(ctx, {
        type: 'pie',
        data: {
          labels: data.labels,
          datasets: [{
            data: data.data,
            backgroundColor: data.backgroundColors,
            borderWidth: 2,
            borderColor: '#ffffff'
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              display: false // We'll use custom legend
            },
            tooltip: {
              callbacks: {
                label: function(context) {
                  const product = data.products[context.dataIndex];
                  return [
                    product.product_name,
                    `Quantity: ${product.total_quantity}`,
                    `Revenue: ₱${product.total_revenue.toFixed(2)}`,
                    `Store: ${product.store_name}`
                  ];
                }
              }
            }
          },
          animation: {
            animateRotate: true,
            duration: 1000
          }
        }
      });
    }

    // Render custom legend
    function renderLegend(data) {
      const legendContainer = document.getElementById('chartLegend');
      legendContainer.innerHTML = '';

      data.products.forEach((product, index) => {
        const legendItem = document.createElement('div');
        legendItem.className = 'legend-item';
        legendItem.innerHTML = `
          <div class="legend-color" style="background-color: ${data.backgroundColors[index]}"></div>
          <div class="legend-text">
            <span class="legend-name">${product.product_name}</span>
            <span class="legend-value">${product.total_quantity} sold</span>
          </div>
        `;
        legendContainer.appendChild(legendItem);
      });
    }

    // Render additional statistics
    function renderStats(data) {
      const statsContainer = document.getElementById('chartStats');
      
      const totalQuantity = data.data.reduce((sum, value) => sum + value, 0);
      const totalRevenue = data.products.reduce((sum, product) => sum + product.total_revenue, 0);
      const avgPrice = totalRevenue / totalQuantity || 0;

      statsContainer.innerHTML = `
        <div class="stat-item">
          <span>Total Items Sold:</span>
          <span>${totalQuantity}</span>
        </div>
        <div class="stat-item">
          <span>Total Revenue:</span>
          <span>₱${totalRevenue.toFixed(2)}</span>
        </div>
        <div class="stat-item">
          <span>Average Price:</span>
          <span>₱${avgPrice.toFixed(2)}</span>
        </div>
        <div class="stat-item">
          <span>Category:</span>
          <span>${data.category === 'all' ? 'All Categories' : data.category.charAt(0).toUpperCase() + data.category.slice(1)}</span>
        </div>
      `;
    }

    // ===== CUSTOMER ENGAGEMENT CHART FUNCTIONS =====

    // Initialize the customer engagement line chart
    function initializeEngagementChart() {
      loadEngagementData('30d');
    }

    // Setup engagement period filter event listener
    function setupEngagementPeriodFilter() {
      const periodFilter = document.getElementById('engagementPeriodFilter');
      periodFilter.addEventListener('change', (e) => {
        loadEngagementData(e.target.value);
      });
    }

    // Load engagement data from API
    async function loadEngagementData(period) {
      try {
        showEngagementLoading();
        
        const response = await fetch(`/api/owner/customer-engagement?period=${period}`);
        const data = await response.json();

        if (!response.ok) {
          throw new Error(data.error || 'Failed to fetch engagement data');
        }

        if (data.labels.length === 0) {
          showEngagementNoData(period);
          return;
        }

        renderEngagementChart(data);
        renderEngagementStats(data);

      } catch (error) {
        console.error('Error loading engagement data:', error);
        showEngagementError(error.message);
      }
    }

    // Show loading state for engagement chart
    function showEngagementLoading() {
      const chartContainer = document.querySelector('.engagement-chart-container');
      chartContainer.innerHTML = '<div class="loading"><i class="fas fa-spinner fa-spin"></i> Loading engagement data...</div>';
      document.getElementById('engagementStats').innerHTML = '';
    }

    // Show no data state for engagement chart
    function showEngagementNoData(period) {
      const chartContainer = document.querySelector('.engagement-chart-container');
      const periodText = getPeriodText(period);
      chartContainer.innerHTML = `
        <div class="no-data">
          <i class="fas fa-chart-line"></i>
          <div>No engagement data found for ${periodText}</div>
        </div>
      `;
      document.getElementById('engagementStats').innerHTML = '';
    }

    // Show error state for engagement chart
    function showEngagementError(message) {
      const chartContainer = document.querySelector('.engagement-chart-container');
      chartContainer.innerHTML = `
        <div class="no-data">
          <i class="fas fa-exclamation-triangle"></i>
          <div>Error: ${message}</div>
        </div>
      `;
      document.getElementById('engagementStats').innerHTML = '';
    }

    // Render the engagement line chart
    function renderEngagementChart(data) {
      const ctx = document.getElementById('engagementLineChart').getContext('2d');
      
      // Destroy existing chart if it exists
      if (engagementChart) {
        engagementChart.destroy();
      }

      engagementChart = new Chart(ctx, {
        type: 'line',
        data: {
          labels: data.labels,
          datasets: data.datasets
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          interaction: {
            mode: 'index',
            intersect: false,
          },
          plugins: {
            legend: {
              position: 'top',
              labels: {
                usePointStyle: true,
                padding: 20,
                font: {
                  size: 12
                }
              }
            },
            tooltip: {
              backgroundColor: 'rgba(0, 0, 0, 0.8)',
              titleColor: 'white',
              bodyColor: 'white',
              borderColor: '#7c0f0f',
              borderWidth: 1,
              callbacks: {
                label: function(context) {
                  const label = context.dataset.label || '';
                  const value = context.parsed.y;
                  
                  if (label === 'Active Customers') {
                    return `${label}: ${value} customers`;
                  } else if (label === 'Points Earned') {
                    return `${label}: ${value} points`;
                  } else if (label === 'Total Transactions') {
                    return `${label}: ${value} transactions`;
                  }
                  return `${label}: ${value}`;
                }
              }
            }
          },
          scales: {
            x: {
              display: true,
              title: {
                display: true,
                text: getPeriodText(data.period),
                font: {
                  size: 12,
                  weight: 'bold'
                }
              },
              grid: {
                display: false
              }
            },
            y: {
              type: 'linear',
              display: true,
              position: 'left',
              title: {
                display: true,
                text: 'Customers & Transactions',
                font: {
                  size: 12,
                  weight: 'bold'
                }
              },
              grid: {
                color: 'rgba(0, 0, 0, 0.1)'
              }
            },
            y1: {
              type: 'linear',
              display: true,
              position: 'right',
              title: {
                display: true,
                text: 'Points Earned',
                font: {
                  size: 12,
                  weight: 'bold'
                }
              },
              grid: {
                drawOnChartArea: false,
              },
            }
          },
          animation: {
            duration: 1000,
            easing: 'easeInOutQuart'
          }
        }
      });
    }

    // Render engagement statistics
    function renderEngagementStats(data) {
      const statsContainer = document.getElementById('engagementStats');
      const summary = data.summary;

      statsContainer.innerHTML = `
        <div class="engagement-stat-item">
          <span class="engagement-stat-value">${summary.totalCustomers}</span>
          <span class="engagement-stat-label">Total Customers</span>
        </div>
        <div class="engagement-stat-item">
          <span class="engagement-stat-value">${summary.totalPoints.toLocaleString()}</span>
          <span class="engagement-stat-label">Points Earned</span>
        </div>
        <div class="engagement-stat-item">
          <span class="engagement-stat-value">${summary.totalTransactions}</span>
          <span class="engagement-stat-label">Transactions</span>
        </div>
        <div class="engagement-stat-item">
          <span class="engagement-stat-value">${summary.avgPointsPerTransaction.toFixed(1)}</span>
          <span class="engagement-stat-label">Avg Points/Transaction</span>
        </div>
      `;
    }

    // Helper function to get period text
    function getPeriodText(period) {
      switch (period) {
        case '7d': return 'Last 7 Days';
        case '30d': return 'Last 30 Days';
        case '90d': return 'Last 90 Days';
        case '1y': return 'Last Year';
        default: return 'Selected Period';
      }
    }

    // ===== K-MEANS RECOMMENDATIONS FUNCTIONS =====

    // Initialize recommendations
    function initializeRecommendations() {
      loadRecommendations();
    }

    // Setup recommendation refresh button
    function setupRecommendationRefresh() {
      const refreshBtn = document.getElementById('refreshRecommendations');
      refreshBtn.addEventListener('click', () => {
        loadRecommendations();
      });
    }

    // Load recommendations from API
    async function loadRecommendations() {
      try {
        showRecommendationsLoading();
        
        const response = await fetch('/api/owner/recommendations');
        const data = await response.json();

        if (!response.ok) {
          throw new Error(data.error || 'Failed to fetch recommendations');
        }

        if (data.recommendations.length === 0) {
          showNoRecommendations();
          return;
        }

        renderRecommendations(data.recommendations);

      } catch (error) {
        console.error('Error loading recommendations:', error);
        showRecommendationsError(error.message);
      }
    }

    // Show loading state for recommendations
    function showRecommendationsLoading() {
      const container = document.getElementById('recommendationsContainer');
      container.innerHTML = `
        <div class="loading">
          <i class="fas fa-brain fa-spin"></i>
          <div>Analyzing data with K-means clustering...</div>
        </div>
      `;
    }

    // Show no recommendations state
    function showNoRecommendations() {
      const container = document.getElementById('recommendationsContainer');
      container.innerHTML = `
        <div class="no-recommendations">
          <i class="fas fa-lightbulb"></i>
          <div>No recommendations available</div>
          <div style="font-size: 11px; margin-top: 4px;">Need more transaction data to generate insights</div>
        </div>
      `;
    }

    // Show error state for recommendations
    function showRecommendationsError(message) {
      const container = document.getElementById('recommendationsContainer');
      container.innerHTML = `
        <div class="no-recommendations">
          <i class="fas fa-exclamation-triangle"></i>
          <div>Error loading recommendations</div>
          <div style="font-size: 11px; margin-top: 4px;">${message}</div>
        </div>
      `;
    }

    // Render recommendations
    function renderRecommendations(recommendations) {
      const container = document.getElementById('recommendationsContainer');
      container.innerHTML = '';

      recommendations.forEach((rec, index) => {
        const recommendationElement = createRecommendationElement(rec, index);
        container.appendChild(recommendationElement);
      });
    }

    // Create individual recommendation element
    function createRecommendationElement(rec, index) {
      const div = document.createElement('div');
      div.className = 'recommendation-item';
      
      const iconClass = getRecommendationIcon(rec.type);
      const priorityClass = `priority-${rec.priority}`;
      
      div.innerHTML = `
        <div class="recommendation-icon ${iconClass}">
          <i class="fas ${getRecommendationIconClass(rec.type)}"></i>
        </div>
        <div class="recommendation-header">
          <h4 class="recommendation-title">${rec.title}</h4>
          <span class="recommendation-priority ${priorityClass}">${rec.priority}</span>
        </div>
        <div class="recommendation-description">${rec.description}</div>
        <div class="recommendation-action">
          <span class="action-text">${rec.action}</span>
          <span class="recommendation-type">${rec.type.replace('_', ' ')}</span>
        </div>
        ${rec.count ? `<div class="recommendation-stats">
          <span class="stat-badge">${rec.count} customers</span>
        </div>` : ''}
        ${rec.revenue ? `<div class="recommendation-stats">
          <span class="stat-badge">₱${rec.revenue.toFixed(2)} revenue</span>
        </div>` : ''}
      `;
      
      return div;
    }

    // Get recommendation icon class
    function getRecommendationIcon(type) {
      switch (type) {
        case 'customer_segment':
        case 'customer_retention':
        case 'customer_growth':
          return 'customer-segment';
        case 'product_optimization':
        case 'product_improvement':
          return 'product-optimization';
        case 'operational_optimization':
          return 'operational-optimization';
        case 'promotional_strategy':
          return 'promotional-strategy';
        default:
          return 'customer-segment';
      }
    }

    // Get FontAwesome icon class
    function getRecommendationIconClass(type) {
      switch (type) {
        case 'customer_segment':
        case 'customer_retention':
        case 'customer_growth':
          return 'fa-users';
        case 'product_optimization':
        case 'product_improvement':
          return 'fa-box';
        case 'operational_optimization':
          return 'fa-cogs';
        case 'promotional_strategy':
          return 'fa-bullhorn';
        case 'store_optimization':
          return 'fa-store';
        case 'insufficient_data':
          return 'fa-database';
        default:
          return 'fa-lightbulb';
      }
    }
  </script>
</body>
</html>
