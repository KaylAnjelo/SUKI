<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Generate Reports</title>
  <link rel="stylesheet" href="/css/AdminStyles.css" />
  <script src="/js/notifications.js" defer></script>
  <script src="/js/logout.js" defer></script>
  <script src="/js/reports.js" defer></script>
  <script src="/js/download.js" defer></script>
  <script src="/js/pagination.js" defer></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.25/jspdf.plugin.autotable.min.js"></script>
  <link rel="icon" type="image/png" href="/assets/SUKI Logo 2.png">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
</head>
<body>
  <div class="container">
    <aside class="sidebar">
      <div class="logo">SUKI Incorporation</div>
        <nav class="nav">
          <a href="/dashboard" class="nav-item">
              <i class="fas fa-chart-line"></i>Dashboard
          </a>
          <div class="nav-item dropdown">
            <span class="dropdown-toggle">
            <i class="fas fa-file-alt"></i>Generate Reports
            </span>
              <div class="dropdown-menu">
                  <a href="/reports/sales" class="dropdown-item "><i class="fas fa-dollar-sign"></i>Sales</a>
                  <a href="/reports/transactions" class="dropdown-item active"><i class="fas fa-receipt"></i>User Transactions</a>
                  <a href="/reports/activity" class="dropdown-item"><i class="fas fa-user-clock"></i>User Activity</a>
              </div>
          </div>
          <a href="/transac" class="nav-item">
            <i class="fas fa-exchange-alt"></i>Transactions
          </a>
          <div class="nav-item dropdown">
            <span class="dropdown-toggle">
                <i class="fas fa-users"></i>Users
            </span>
              <div class="dropdown-menu">
                <a href="/users/Redemptions"> <i class="fas fa-coins"></i>Redemptions</a>
                <a href="/users/UserManagement"><i class="fa-solid fa-fingerprint"></i>Management</a>
              </div>
          </div>
        </nav>
      </aside>
    <main class="main-content">
      <div class="header">
        <h1>User Transaction Reports</h1>
        <div class="notif-container">
          <button id="notificationsBtn" class="notif-button"><i class="fas fa-bell"></i></button>
          <div id="notificationsDropdown" style="display: none;">
            <ul id="notificationsList"></ul>
          </div>
          <form id="logoutForm" action="/logout" method="POST" style="display: inline;">
            <button type="submit" class="logout">Log out</button>
          </form>
        </div>
      </div>
      <button class="dls" onclick="openModal('csv')"><i class="fa-solid fa-file-csv"></i>Download CSV</button>
      <button class="dls" onclick="openModal('pdf')"><i class="fa-solid fa-file-pdf"></i>Download PDF</button>
      <!-- Modal -->
      <div id="fileModal" class="modal">
        <div class="modal-content">
          <span class="close" onclick="closeModal()">&times;</span>
          <h3>Enter File Name</h3>
          <input type="text" id="fileNameInput" placeholder="e.g., transactions-report" />
          <button onclick="downloadFile()">Download</button>
        </div>
      </div>
      <!-- Filters Container -->
      <div class="filters-container" id="filtersContainer">
        <div class="filter-group">
          <label for="startDate">Date Range:</label>
          <input type="date" id="startDate" name="startDate">
          <span>to</span>
          <input type="date" id="endDate" name="endDate" readonly>
        </div>

        <div class="filter-group">
          <label for="userFilter">User:</label>
          <select id="userFilter" name="user">
            <option value="">All Users</option>
          </select>
        </div>

        <div class="filter-group">
          <label for="transactionType">Transaction Type:</label>
          <select id="transactionType" name="transactionType">
            <option value="">All Types</option>
            <option value="purchase">Purchase</option>
            <option value="redemption">Redemption</option>
            <option value="refund">Refund</option>
          </select>
        </div>

        <button id="applyFilters" class="filter-btn">Apply Filters</button>
      </div>

      <div class="table-container">
        <table id="transactionsTable">
          <thead>
            <tr>
              <th>Date</th>
              <th>User</th>
              <th>Transaction Type</th>
              <th>Reference Number</th>
              <th>Amount</th>
              <th>Store</th>
              <th>Details</th>
            </tr>
          </thead>
          <tbody>
            
          </tbody>
        </table>
      </div>

      <!-- Pagination -->
      <div class="pagination">
        <button id="prevPage" class="pagination-btn" disabled>
          <i class="fas fa-chevron-left"></i> Previous
        </button>
        <div class="page-numbers">
          <span id="currentPage">1</span> of <span id="totalPages">1</span>
        </div>
        <button id="nextPage" class="pagination-btn" disabled>
          Next <i class="fas fa-chevron-right"></i>
        </button>
      </div>
    </main>
  </div>
<script>
  let currentExportType = '';

  function openModal(type) {
    currentExportType = type;
    document.getElementById('fileModal').style.display = 'block';
    document.getElementById('fileNameInput').value = `transactions-report-${new Date().toISOString().slice(0, 10)}`;
  }

  function closeModal() {
    document.getElementById('fileModal').style.display = 'none';
  }

  function downloadFile() {
    const filename = document.getElementById('fileNameInput').value || 'transactions-report';
    const startDate = document.getElementById('startDate').value;
    const endDate = document.getElementById('endDate').value;
    const user = document.getElementById('userFilter').value;
    const transactionType = document.getElementById('transactionType').value;
    const sortOrder = 'newest'; // Default sort

    let url = '';
    if (currentExportType === 'csv') {
      url = `/reports/transactions/export/csv?filename=${encodeURIComponent(filename)}`;
    } else if (currentExportType === 'pdf') {
      url = `/reports/transactions/export/pdf?filename=${encodeURIComponent(filename)}`;
    }

    // Add filter parameters
    if (startDate) url += `&startDate=${startDate}`;
    if (endDate) url += `&endDate=${endDate}`;
    if (user) url += `&user=${encodeURIComponent(user)}`;
    if (transactionType) url += `&transactionType=${encodeURIComponent(transactionType)}`;
    if (sortOrder) url += `&sortOrder=${sortOrder}`;

    window.open(url, '_blank');
    closeModal();
  }

  // Close modal when clicking outside
  window.onclick = function(event) {
    const modal = document.getElementById('fileModal');
    if (event.target === modal) {
      closeModal();
    }
  }

  // Populate user dropdown
  async function populateUserDropdown() {
    try {
      const response = await fetch('/user-transactions/users');
      const users = await response.json();
      
      const userFilter = document.getElementById('userFilter');
      userFilter.innerHTML = '<option value="">All Users</option>';
      
      users.forEach(user => {
        const option = document.createElement('option');
        option.value = user;
        option.textContent = user;
        userFilter.appendChild(option);
      });
    } catch (error) {
      console.error('Error fetching users:', error);
    }
  }

  // Display transactions in table
  function displayTransactions(transactions) {
    const tbody = document.querySelector('#transactionsTable tbody');
    tbody.innerHTML = '';
    
    if (transactions.length === 0) {
      tbody.innerHTML = '<tr><td colspan="7">No transactions found</td></tr>';
      return;
    }
    
    transactions.forEach(transaction => {
      const row = document.createElement('tr');
      row.innerHTML = `
        <td>${transaction.date}</td>
        <td>${transaction.user}</td>
        <td>${transaction.transaction_type}</td>
        <td>${transaction.reference_number}</td>
        <td>â‚±${parseFloat(transaction.amount).toFixed(2)}</td>
        <td>${transaction.store}</td>
        <td>${transaction.product_details || 'N/A'}</td>
      `;
      tbody.appendChild(row);
    });
  }

  // Apply filters and fetch data
  async function applyFilters() {
    const startDate = document.getElementById('startDate').value;
    const endDate = document.getElementById('endDate').value;
    const user = document.getElementById('userFilter').value;
    const transactionType = document.getElementById('transactionType').value;
    const sortOrder = 'newest';

    try {
      const response = await fetch('/user-transactions/filter', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          startDate,
          endDate,
          user,
          transactionType,
          sortOrder
        })
      });

      const transactions = await response.json();
      displayTransactions(transactions);
    } catch (error) {
      console.error('Error applying filters:', error);
    }
  }

  // Add event listener to apply filters button
  document.getElementById('applyFilters').addEventListener('click', applyFilters);

  document.addEventListener('DOMContentLoaded', function() {
    // Set default dates
    const endDate = document.getElementById('endDate');
    const startDate = document.getElementById('startDate');
    
    // Set end date to today
    endDate.valueAsDate = new Date();
    
    // Set start date to 30 days ago
    const thirtyDaysAgo = new Date();
    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
    startDate.valueAsDate = thirtyDaysAgo;

    // Populate user dropdown
    populateUserDropdown();
    
    // Load initial data
    applyFilters();
  });
</script>
</body>
</html>
